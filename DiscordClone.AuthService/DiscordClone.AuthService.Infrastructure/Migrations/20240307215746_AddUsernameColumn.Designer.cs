// <auto-generated />
using System;
using DiscordClone.AuthService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DiscordClone.AuthService.Infrastructure.Migrations
{
    [DbContext(typeof(AuthContext))]
    [Migration("20240307215746_AddUsernameColumn")]
    partial class AddUsernameColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiscordClone.AuthService.Domain.Models.Auth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Banned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("banned");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool?>("EmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("email_verified");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("Passwordhash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("passwordhash");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.Property<Guid>("Useruuid")
                        .HasColumnType("uuid")
                        .HasColumnName("useruuid");

                    b.HasKey("Id")
                        .HasName("auth_pkey");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "auth_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Useruuid" }, "auth_useruuid_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "idx_auth_username");

                    b.HasIndex(new[] { "Useruuid" }, "idx_auth_useruuid");

                    b.ToTable("auth", (string)null);
                });

            modelBuilder.Entity("DiscordClone.AuthService.Domain.Models.Ban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Adminuuid")
                        .HasColumnType("uuid")
                        .HasColumnName("adminuuid");

                    b.Property<DateTime>("BanDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("ban_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("BanReason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ban_reason");

                    b.Property<Guid>("Useruuid")
                        .HasColumnType("uuid")
                        .HasColumnName("useruuid");

                    b.HasKey("Id")
                        .HasName("bans_pkey");

                    b.HasIndex(new[] { "Useruuid" }, "idx_bans_useruuid");

                    b.ToTable("bans", (string)null);
                });

            modelBuilder.Entity("DiscordClone.AuthService.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("roles_pkey");

                    b.HasIndex(new[] { "RoleName" }, "roles_role_key")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("DiscordClone.AuthService.Domain.Models.Auth", b =>
                {
                    b.HasOne("DiscordClone.AuthService.Domain.Models.Role", "Role")
                        .WithMany("Auths")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("auth_role_id_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DiscordClone.AuthService.Domain.Models.Ban", b =>
                {
                    b.HasOne("DiscordClone.AuthService.Domain.Models.Auth", "User")
                        .WithMany("Bans")
                        .HasForeignKey("Useruuid")
                        .HasPrincipalKey("Useruuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bans_useruuid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscordClone.AuthService.Domain.Models.Auth", b =>
                {
                    b.Navigation("Bans");
                });

            modelBuilder.Entity("DiscordClone.AuthService.Domain.Models.Role", b =>
                {
                    b.Navigation("Auths");
                });
#pragma warning restore 612, 618
        }
    }
}
